import { connect } from 'react-redux'

import TodoList from "./TodoList"
import { VisibilityFilters, toggleTodo } from '../redux/actions';

const filterTodos = (todos, filter) => {
  switch(filter) {
    case VisibilityFilters.SHOW_ACTIVE:
      return todos.filter((todo) => !todo.completed)
    case VisibilityFilters.SHOW_COMPLETED:
      return todos.filter((todo) => todo.completed)
    default:
      return todos
  }
}

// In this situation, we want to create a Redux-aware wrapper around a dumb component.
// Using the dumb component means two things: 
// 1) JS -> View = change its props value according to state change. For this, mapStateToProps.
// 2) View -> JS = React to events generated by the dumb component (with dispatching an action). For this, mapDispatchToProps provides the needed callbacks.
// Both return props to be passed to the dumb component.

const mapStateToProps = (state, ownProps) => {
  return {
    todos: filterTodos(state.todos, ownProps.filter)
  }
}

const mapDispatchToProps = (dispatch) => {
  return {
    onTodoClick: (id) => {
      dispatch(toggleTodo(id))
    }
  }
}

// The smart (aka container) component can now be created as the result of the wiring of the dumb and some redux-logic.
const VisibleTodoList = connect(mapStateToProps, mapDispatchToProps)(TodoList)

export default VisibleTodoList